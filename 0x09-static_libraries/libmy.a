!<arch>
0-isupper.c/    0           0     0     644     290       `
#include "main.h"
/**
* _isupper - our fucntion/entry point
* @c: character to be checked
*
* Description: 'a C program that check if a charachter is uppercase'
*
* Return: 1 if it's upper and 0 if not
*/
int _isupper(int c)
	{
		if (c > 64 && c < 91)
		return (1);
		else
		return (0);
	}
0-memset.c/     0           0     0     644     285       `
#include "main.h"
#include <string.h>
/**
 * _memset - prints half of a string
 *
 * @s: string input
 * @b: char
 * @n: number
 * Return: return string
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
	*(s + i) = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     350       `
#include "main.h"
#include <string.h>
/**
 * *_strcat - prints half of a string
 *
 * @dest: string input
 * @src: second string
 * Return: concatenate
 */
char *_strcat(char *dest, char *src)
{
	char *con = dest;

	while (*dest != '\0')
	{
		dest++;
	}

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (con);
}
100-atoi.c/     0           0     0     644     121       `
#include "main.h"
/**
 * _atoi - entrypoint
 *
 * @s: string 1
 *
 * Return: 1 
 */

int _atoi(char *s)
{
	return (1);
}

1-isdigit.c/    0           0     0     644     286       `
#include "main.h"
/**
* _isdigit - our fucntion/entry point
* @c: character to be checked
*
* Description: 'a C program that check if a charachter is digit'
*
* Return: 1 if it's digit and 0 if not
*/
int _isdigit(int c)
	{
		if (c > 47 && c < 58)
		return (1);
		else
		return (0);
	}
1-memcpy.c/     0           0     0     644     308       `
#include "main.h"
#include <string.h>
/**
 * _memcpy - copy memory
 *
 * @dest: string input
 * @src: string input
 * @n: number
 * Return: return string
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
	*(dest + i) = *(src + i);
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     396       `
#include "main.h"
#include <string.h>
/**
 * *_strncat - prints half of a string
 *
 * @dest: string input
 * @src: second string
 * @n: n
 * Return: concatenate
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	char *con = dest;

	while (*dest != '\0')
	{
		dest++;
	}

	while (i < n && *src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
		i++;
	}
	*dest = '\0';
	return (con);
}
2-strchr.c/     0           0     0     644     326       `
#include "main.h"
#include <string.h>
/**
 * _strchr - locate a charachter
 *
 * @s: string input
 * @c: charachter to be searched
 * Return: pointer tp the first charachter
 */

char *_strchr(char *s, char c)
{

	while (*s != '\0')
	{
		if (*s == c)
		{
			break;
		}
		s++;
	}
	if (*s == c)
		return (s);

	return ('\0');
}
2-strlen.c/     0           0     0     644     255       `
#include "main.h"
/**
 * _strlen - function that calculate the lenth of a string
 *
 * description: reset to n
 *
 * @s: string
 * Return: i the lengh of the string
 */

int _strlen(char *s)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{
	}
	return (i);
}

2-strncpy.c/    0           0     0     644     378       `
#include "main.h"
#include <string.h>
/**
 * *_strncpy - prints half of a string
 *
 * @dest: string input
 * @src: second string
 * @n: n
 * Return: copied strings
 */

	char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && (*(src + i) != '\0'); i++)
	{
		*(dest + i) = *(src + i);
	}
	for (; i < n; i++)
	{
	*(dest + i) = '\0';
	}
	return (dest);

}


3-islower.c/    0           0     0     644     291       `
#include "main.h"
/**
* _islower - our fucntion/entry point
* @c: character to be checked
*
* Description: 'a C program that check if a charachter is lowercase'
*
* Return: 1 if it's lower and 0 if not
*/
int _islower(int c)
	{
		if (c > 96 && c < 123)
		return (1);
		else
		return (0);
	}

3-puts.c/       0           0     0     644     248       `
#include "main.h"
/**
 * _puts - function that calculate the lenth of a string
 *
 * description: reset to n
 *
 * @str: string
 *
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     342       `
#include "main.h"
#include <string.h>
/**
 * *_strcmp - compare 2 strings
 *
 * @s1: string input
 * @s2: second string
 * Return: compared strings
 */

int _strcmp(char *s1, char *s2)
{
	while (((*s1 != '\0') && (*s2 != '\0')) && (*s1 == *s2))
	{
		s1++;
		s2++;
	}

	if (*s1 == *s2)
	{
		return (0);
	}

	else
	{
		return (*s1 - *s2);
	}
}
3-strspn.c/     0           0     0     644     403       `
#include "main.h"
#include <string.h>
/**
 * _strspn - strspn
 *
 * @s: string input
 * @accept: string input
 * Return: strspn
 */

unsigned int _strspn(char *s, char *accept)
	{
	unsigned int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				break;
			}
		}
		if (accept[j] == '\0')
		{
			return (i);
		}
	}
	return (i);
}

4-isalpha.c/    0           0     0     644     316       `
#include "main.h"
/**
* _isalpha - our fucntion/entry point
* @c: character to be checked
*
* Description: 'a C program that check if a charachter is alphabetic'
*
* Return: 1 if it's lower and 0 if not
*/
int _isalpha(int c)
	{
		if ((c > 96 && c < 123) || (c > 64 && c < 91))
		return (1);
		else
		return (0);
	}
4-strpbrk.c/    0           0     0     644     373       `
#include "main.h"
#include <string.h>
/**
 * _strpbrk - strpbrk
 *
 * @s: string input
 * @accept: string input
 * Return: strpbrk function
 */

char *_strpbrk(char *s, char *accept)
	{
	unsigned int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				return (s + i);
			}
		}
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     213       `
#include "main.h"
/**
 * _strstr - entrypoint
 *
 * @haystack: string 1
 * @needle: string 2
 *
 * Return: 1 mean greater & -1 mean less
 */

char *_strstr(char *haystack, char *needle)
{
	return (haystack);
	}
}

6-abs.c/        0           0     0     644     284       `
#include "main.h"
/**
 * _abs - entrypoint
 *
 * @r: the num to be check
 *
 * Description: function check if a number is greater or less or equal to 0
 *
 * Return: 1 mean greater & -1 mean less
 */

int _abs(int r)
{
	if (r > 0)
	return (r);
	else
	{
	r = -1 * r;
	return (r);
	}
}
9-strcpy.c/     0           0     0     644     303       `
#include "main.h"
/**
 * _strcpy - copies a string from a pointer to another
 *
 * @src: first string
 *
 * @dest: copied string
 *
 * Return: New string
 */

char *_strcpy(char *dest, char *src)
{
	int a;

	for (a = 0; src[a] != '\0'; a++)
	{
		dest[a] = src[a];
	}
	dest[a] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

0-isupper.o/    0           0     0     644     290       `
#include "main.h"
/**
* _isupper - our fucntion/entry point
* @c: character to be checked
*
* Description: 'a C program that check if a charachter is uppercase'
*
* Return: 1 if it's upper and 0 if not
*/
int _isupper(int c)
	{
		if (c > 64 && c < 91)
		return (1);
		else
		return (0);
	}
0-memset.o/     0           0     0     644     285       `
#include "main.h"
#include <string.h>
/**
 * _memset - prints half of a string
 *
 * @s: string input
 * @b: char
 * @n: number
 * Return: return string
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
	*(s + i) = b;
	}
	return (s);
}

0-strcat.o/     0           0     0     644     350       `
#include "main.h"
#include <string.h>
/**
 * *_strcat - prints half of a string
 *
 * @dest: string input
 * @src: second string
 * Return: concatenate
 */
char *_strcat(char *dest, char *src)
{
	char *con = dest;

	while (*dest != '\0')
	{
		dest++;
	}

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (con);
}
100-atoi.o/     0           0     0     644     121       `
#include "main.h"
/**
 * _atoi - entrypoint
 *
 * @s: string 1
 *
 * Return: 1 
 */

int _atoi(char *s)
{
	return (1);
}

1-isdigit.o/    0           0     0     644     286       `
#include "main.h"
/**
* _isdigit - our fucntion/entry point
* @c: character to be checked
*
* Description: 'a C program that check if a charachter is digit'
*
* Return: 1 if it's digit and 0 if not
*/
int _isdigit(int c)
	{
		if (c > 47 && c < 58)
		return (1);
		else
		return (0);
	}
1-memcpy.o/     0           0     0     644     308       `
#include "main.h"
#include <string.h>
/**
 * _memcpy - copy memory
 *
 * @dest: string input
 * @src: string input
 * @n: number
 * Return: return string
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
	*(dest + i) = *(src + i);
	}
	return (dest);
}
1-strncat.o/    0           0     0     644     396       `
#include "main.h"
#include <string.h>
/**
 * *_strncat - prints half of a string
 *
 * @dest: string input
 * @src: second string
 * @n: n
 * Return: concatenate
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	char *con = dest;

	while (*dest != '\0')
	{
		dest++;
	}

	while (i < n && *src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
		i++;
	}
	*dest = '\0';
	return (con);
}
2-strchr.o/     0           0     0     644     326       `
#include "main.h"
#include <string.h>
/**
 * _strchr - locate a charachter
 *
 * @s: string input
 * @c: charachter to be searched
 * Return: pointer tp the first charachter
 */

char *_strchr(char *s, char c)
{

	while (*s != '\0')
	{
		if (*s == c)
		{
			break;
		}
		s++;
	}
	if (*s == c)
		return (s);

	return ('\0');
}
2-strlen.o/     0           0     0     644     255       `
#include "main.h"
/**
 * _strlen - function that calculate the lenth of a string
 *
 * description: reset to n
 *
 * @s: string
 * Return: i the lengh of the string
 */

int _strlen(char *s)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{
	}
	return (i);
}

2-strncpy.o/    0           0     0     644     378       `
#include "main.h"
#include <string.h>
/**
 * *_strncpy - prints half of a string
 *
 * @dest: string input
 * @src: second string
 * @n: n
 * Return: copied strings
 */

	char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && (*(src + i) != '\0'); i++)
	{
		*(dest + i) = *(src + i);
	}
	for (; i < n; i++)
	{
	*(dest + i) = '\0';
	}
	return (dest);

}


3-islower.o/    0           0     0     644     291       `
#include "main.h"
/**
* _islower - our fucntion/entry point
* @c: character to be checked
*
* Description: 'a C program that check if a charachter is lowercase'
*
* Return: 1 if it's lower and 0 if not
*/
int _islower(int c)
	{
		if (c > 96 && c < 123)
		return (1);
		else
		return (0);
	}

3-puts.o/       0           0     0     644     248       `
#include "main.h"
/**
 * _puts - function that calculate the lenth of a string
 *
 * description: reset to n
 *
 * @str: string
 *
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
3-strcmp.o/     0           0     0     644     342       `
#include "main.h"
#include <string.h>
/**
 * *_strcmp - compare 2 strings
 *
 * @s1: string input
 * @s2: second string
 * Return: compared strings
 */

int _strcmp(char *s1, char *s2)
{
	while (((*s1 != '\0') && (*s2 != '\0')) && (*s1 == *s2))
	{
		s1++;
		s2++;
	}

	if (*s1 == *s2)
	{
		return (0);
	}

	else
	{
		return (*s1 - *s2);
	}
}
3-strspn.o/     0           0     0     644     403       `
#include "main.h"
#include <string.h>
/**
 * _strspn - strspn
 *
 * @s: string input
 * @accept: string input
 * Return: strspn
 */

unsigned int _strspn(char *s, char *accept)
	{
	unsigned int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				break;
			}
		}
		if (accept[j] == '\0')
		{
			return (i);
		}
	}
	return (i);
}

4-isalpha.o/    0           0     0     644     316       `
#include "main.h"
/**
* _isalpha - our fucntion/entry point
* @c: character to be checked
*
* Description: 'a C program that check if a charachter is alphabetic'
*
* Return: 1 if it's lower and 0 if not
*/
int _isalpha(int c)
	{
		if ((c > 96 && c < 123) || (c > 64 && c < 91))
		return (1);
		else
		return (0);
	}
4-strpbrk.o/    0           0     0     644     373       `
#include "main.h"
#include <string.h>
/**
 * _strpbrk - strpbrk
 *
 * @s: string input
 * @accept: string input
 * Return: strpbrk function
 */

char *_strpbrk(char *s, char *accept)
	{
	unsigned int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				return (s + i);
			}
		}
	}
	return ('\0');
}

5-strstr.o/     0           0     0     644     213       `
#include "main.h"
/**
 * _strstr - entrypoint
 *
 * @haystack: string 1
 * @needle: string 2
 *
 * Return: 1 mean greater & -1 mean less
 */

char *_strstr(char *haystack, char *needle)
{
	return (haystack);
	}
}

6-abs.o/        0           0     0     644     284       `
#include "main.h"
/**
 * _abs - entrypoint
 *
 * @r: the num to be check
 *
 * Description: function check if a number is greater or less or equal to 0
 *
 * Return: 1 mean greater & -1 mean less
 */

int _abs(int r)
{
	if (r > 0)
	return (r);
	else
	{
	r = -1 * r;
	return (r);
	}
}
9-strcpy.o/     0           0     0     644     303       `
#include "main.h"
/**
 * _strcpy - copies a string from a pointer to another
 *
 * @src: first string
 *
 * @dest: copied string
 *
 * Return: New string
 */

char *_strcpy(char *dest, char *src)
{
	int a;

	for (a = 0; src[a] != '\0'; a++)
	{
		dest[a] = src[a];
	}
	dest[a] = '\0';

	return (dest);
}

_putchar.o/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

